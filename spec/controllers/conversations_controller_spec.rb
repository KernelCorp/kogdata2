require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ConversationsController do

  # This should return the minimal set of attributes required to create a valid
  # Conversation. As you add validations to Conversation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "theme" => "MyString"} }

  before :each do
    @owner =  FactoryGirl.create :user, email: 'owner@example.com', conversations: []
    @users = [FactoryGirl.create(:user, email: '1@example.com', conversations: []),
              FactoryGirl.create(:user, email: '2@example.com', conversations: []),
              @owner]
  end

  describe "GET index" do
    it "assigns all conversations as @conversations for owner" do
      @owner.conversations.create! users: @users
      sign_in @owner
      get :index, {}
      assigns(:conversations).should eq(@owner.reload.conversations)
    end

    it 'assigns all conversations as @conversations for not owner' do
      @owner.conversations.create! users: @users
      sign_in @users.first
      get :index, {}
      assigns(:conversations).should eq(@users.first.reload.conversations)
    end
  end

  describe "GET show" do
    it "assigns the requested conversation as @conversation" do
      conversation = @owner.conversations.create! users: @users
      sign_in @owner
      get :show, {:id => conversation.to_param}
      assigns(:conversation).should eq(conversation)
    end

    it 'member can see conversation' do
      conversation = @owner.conversations.create! users: @users
      sign_in @users.first
      get :show, {:id => conversation.to_param}
      assigns(:conversation).should eq(conversation)
    end

    it 'access denied for not members' do
      conversation = @owner.conversations.create! users: @users
      sign_in FactoryGirl.create(:user)
      expect {get :show, {:id => conversation.to_param} }.to raise_error(CanCan::AccessDenied)
    end

  end

  describe "GET new" do
    it "assigns a new conversation as @conversation" do
      sign_in FactoryGirl.create(:user)
      get :new, {}
      assigns(:conversation).should be_a_new(Conversation)
    end
  end

  describe "GET edit" do
    it "assigns the requested conversation as @conversation" do
      conversation = @owner.conversations.create! users: @users
      sign_in @owner
      get :edit, {:id => conversation.to_param}
      assigns(:conversation).should eq(conversation)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Conversation" do
        sign_in @owner
        expect {
          post :create, {conversation: valid_attributes}
        }.to change(Conversation, :count).by(1)
      end

      it "assigns a newly created conversation as @conversation" do
        sign_in @owner
        post :create, conversation: valid_attributes
        assigns(:conversation).should be_a(Conversation)
        assigns(:conversation).should be_persisted
      end

      it "redirects to the created conversation" do
        sign_in @owner
        post :create, {conversation:  valid_attributes}
        response.should redirect_to(Conversation.last)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "assigns the requested conversation as @conversation" do
        sign_in @owner
        conversation = @owner.conversations.create! valid_attributes
        put :update, {:id => conversation.to_param, conversation:  valid_attributes}
        assigns(:conversation).should eq(conversation)
      end

    end
  end



end
