require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EventsController do

  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "city" => "Novosib", date: Date.today } }
  let(:attribute_with_diffuse_date) { { "city" => "Novosib",
                                        year:  Date.today.year,
                                        month: Date.today.month,
                                        day:   Date.today.month,
                                        hour:   23,
                                        minute: 59
                                      } }

  before :each do
    @customer     = FactoryGirl.create :customer
    @photographer = FactoryGirl.create :photographer
    request.accept = 'application/json'
  end

  describe "GET index" do
    it "assigns user's events as @events if I go to '/users/:user_id/events''" do
      sign_in @customer
      event = @customer.events.create! valid_attributes
      not_my_event = (FactoryGirl.create :customer).events.create! valid_attributes
      get :index, {user_id: @customer}
      assigns(:events).should eq([event])
      assigns(:events).should_not include not_my_event
    end

    it 'assigns all active events if I a photographer' do
      sign_in @photographer
      event = @customer.events.create! valid_attributes
      get :index, {}
      assigns(:events).should eq([event])
    end
  end

  describe "GET show" do
    it "assigns the requested event as @event" do
      sign_in @customer       
      event = @customer.events.create! valid_attributes
      get :show, {:id => event.to_param}
      assigns(:event).should eq(event)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Event" do
        sign_in @customer
        expect {
          post :create, {event: valid_attributes}
        }.to change(Event, :count).by(1)
      end

      it "assigns a newly created event as @event" do
        sign_in @customer
        post :create, {event: valid_attributes}
        assigns(:event).should be_a(Event)
        assigns(:event).should be_persisted
      end
    end

    describe "with params with diffuse date" do
      it "creates a new Event" do
        sign_in @customer
        expect {
          post :create, {event: attribute_with_diffuse_date}
        }.to change(Event, :count).by(1)
      end

      it "assigns a newly created event as @event" do
        sign_in @customer
        post :create, {event: attribute_with_diffuse_date}
        assigns(:event).should be_a(Event)
        assigns(:event).should be_persisted
      end
    end

  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested event" do
        sign_in @customer
        event = @customer.events.create! valid_attributes
        # Assuming there are no other events in the database, this
        # specifies that the Event created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Event.any_instance.should_receive(:update).with({ "city" => "" })
        put :update, {:id => event.to_param, event: { "city" => "" }}
      end

      it "assigns the requested event as @event" do
        sign_in @customer
        event = @customer.events.create! valid_attributes
        put :update, {:id => event.to_param, event: valid_attributes}
        assigns(:event).should eq(event)
      end
    end

    describe "with invalid params" do
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested event" do
      sign_in @customer
      event = @customer.events.create! valid_attributes
      expect {
        delete :destroy, {:id => event.to_param}
      }.to change(Event, :count).by(-1)
    end
  end

end
